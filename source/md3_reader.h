
#ifndef __md3_reader_h__
#define __md3_reader_h__

#pragma once


#include <stdio.h>

class MD3_Reader
{
private:
	FILE* m_fp;	//ファイル
	//int m_state;	//0:ヘッダー読み込み前,1:ヘッダー読み込み済み,2:ファイル末尾//
	int m_pcnt;	//粒子数.


public:


	MD3_Reader();
	virtual ~MD3_Reader();

	///////////////////////////////////////////////////////
	//ファイルをオープンする.
	//
	int Open(const char* filepath);
	//
	//	正しくオープンできたときは 0 を返す.
	//	既に別のファイルをオープン済みの場合は -2 を返す.
	//	指定したファイルが見つからないときは -1 を返す.
	//	読み込んだデータが壊れているとき -3を返す.
	//	
	/////////////////////////////////////////////////////////////


	///////////////////////////////////////////////////////
	//ファイルを閉じる.
	//
	void Close();
	//
	//	delete してもこの関数が自動で呼ばれる.
	//
	///////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////
	//ファイルを読み込みして必要なデータを返す.
	//
	int GetParticleCount();
	//
	//	粒子数を返す.
	//	Readの後にこの関数を呼ぶと次のフレームに進める.
	//
	//
	///////////////////////////////////////////////////////////

	////////////////////////////////////////////////////////////////////////////////
	//ファイルを読み込みして必要なデータを返す.
	//
	int Read(int* knd, double* r, double* v, double* f, double *boxaxis, char* text);
	//
	//	戻り値には読み込んだ粒子数を返す.
	//	第一引数に確保したバッファサイズを粒子数(byteサイズではない)で指定する.
	//	第二引数は読み飛ばす粒子数. offset = 4 なら先頭から4粒子を読み飛ばしてそこからcount数の粒子を読む.
	//	第三,四引数以降はNULLにすることで読み飛ばすことができる.
	//
	///////////////////////////////////////////////////////////////////////////////
	

};






#endif	//__md3_reader_h__
